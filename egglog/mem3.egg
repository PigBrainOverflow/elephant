(datatype Expr
  (Wire String i64)
  (Reg String i64 Expr)
  (RegEn String i64 Expr Expr)
  (Mux Expr Expr)
  (Demux i64 Expr Expr)
  (And Expr Expr)
  (Or Expr Expr)
  (Not Expr)
  (Select i64 Expr)
  (Concat Expr Expr))

(datatype Port
  (ReadPort Expr Expr Expr)
  (WritePort Expr Expr Expr)
  (WritePortMask Expr Expr Expr Expr))
(sort ReadPorts (Vec Port))
(sort WritePorts (Vec Port))

(datatype Opt
  (LatchLastRead)
  (WriteReadForward)
  (Sync))
(sort Opts (Vec Opt))

(datatype Memory (Mem ReadPorts WritePorts Opts))

(datatype Type
  (Bitvector i64))

(relation HasType (Expr Type))

(ruleset typing)

(rule
  ((Wire name n))
  ((HasType (Wire name n) (Bitvector n)))
  :ruleset typing)

(rule
  ((Reg name n data)
   (HasType data (Bitvector n)))
  ((HasType (Reg name n data) (Bitvector n)))
  :ruleset typing)

(rule
  ((RegEn name n data enable)
   (HasType data (Bitvector n))
   (HasType enable (Bitvector 1)))
  ((HasType (RegEn name n data enable) (Bitvector n)))
  :ruleset typing)

(rule
  ((Not a)
   (HasType a (Bitvector 1)))
  ((HasType (Not a) (Bitvector 1)))
  :ruleset typing)

(rule
  ((And a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (And a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Or a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (Or a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Select i a)
   (HasType a (Bitvector bw))
   (>= i 0)
   (< i bw))
  ((HasType (Select i a) (Bitvector 1)))
  :ruleset typing)

(rule
 ((Concat a b)
  (HasType a (Bitvector n))
  (HasType b (Bitvector m)))
 ((HasType (Concat a b) (Bitvector (+ n m))))
 :ruleset typing)

(rule
  ((Mux s i)
   (HasType s (Bitvector m))
   (HasType i (Bitvector n))
   (= m (log2 n)))
  ((HasType (Mux s i) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Demux n s i)
   (HasType s (Bitvector 1))
   (HasType i (Bitvector m))
   (= m (log2 n)))
  ((HasType (Demux n s i) (Bitvector n)))
  :ruleset typing)

(ruleset decomp)
;; 2-to-1 mux
;; s a b <--> (a & ~s) | (b & s)
(rule
 ((= mux (Or e0 e1))
  (= e0 (And a (Not s)))
  (= e1 (And b s)))
 ((union mux (Mux s (Concat a b))))
 :ruleset decomp)

(rule
 ((= m_a (Mux s a))
  (HasType s (Bitvector n_s))
  (HasType a (Bitvector n_a))
  (= m_b (Mux s b))
  (HasType b (Bitvector n_b))
  (= n_a n_b)
  (= m_c (Mux s0 (Concat m_a m_b))))
 ((union m_c
   (Mux (Concat s s0) (Concat a b))))
 :ruleset decomp)

(rule
 ((= t1 (And i a))
  (= t0 (And i (Not a))))
 ((union t0 (Select 0 (Demux 2 i a)))
  (union t1 (Select 1 (Demux 2 i a))))
 :ruleset decomp)

(rule
 ((= d_2 (Demux 2 x t))
  (= d_0 (Demux n (Select 0 d_2) s))
  (= d_1 (Demux n (Select 1 d_2) s))
  )
 ((union d_0 (Select 0 (Demux (+ n n) x (Concat s t))))
  (union d_1 (Select 1 (Demux (+ n n) x (Concat s t)))))
 :ruleset decomp)


(let a0 (Wire "a0" 1))
(let a1 (Wire "a1" 1))
(let en (Wire "en" 1))
(let d0 (Wire "d0" 1))
(let d1 (Wire "d1" 1))
(let d (Wire "d" 2))
(let x0_en (Wire "x0_en" 1))
(let x1_en (Wire "x1_en" 1))
(let x2_en (Wire "x2_en" 1))
(let x3_en (Wire "x3_en" 1))
(let x0 (RegEn "x0" 2 d x0_en))
(let x1 (RegEn "x0" 2 d x1_en))
(let x2 (RegEn "x0" 2 d x2_en))
(let x3 (RegEn "x0" 2 d x3_en))

(let na0 (Wire "na0" 1))
(let na1 (Wire "na1" 1))

(let t0 (Wire "t0" 1))
(let t1 (Wire "t1" 1))
(let t2 (Wire "t2" 1))
(let t3 (Wire "t3" 1))

; x0_en := en ∧ (¬a0 ∧ ¬a1) 
; x1_en := en ∧ (a0 ∧ ¬a1) 
; x2_en := en ∧ (¬a0 ∧ a1) 
; x3_en := en ∧ (a0 ∧ a1)

; x0_en ? x0[0] := d0 ; x0_en ? x0[1] := d1 
; x1_en ? x1[0] := d0 ; x1_en ? x1[1] := d1 
; x2_en ? x2[0] := d0 ; x2_en ? x2[1] := d1
; x3_en ? x3[0] := d0 ; x3_en ? x3 [1] := d1

(union d (Concat d0 d1))

(union na0 (Not a0))
(union na1 (Not a1))

(union t0 (And na0 na1))
(union t1 (And a0 na1))
(union t2 (And na0 a1))
(union t3 (And a0 a1))

(union x0_en (And en t0))
(union x1_en (And en t1))
(union x2_en (And en t2))
(union x3_en (And en t3))

(run-schedule (repeat 15 (saturate typing) (saturate decomp)))

;(query-extract rd0)



