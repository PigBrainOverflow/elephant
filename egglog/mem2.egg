(sort Expr)
(sort ExprVec (Vec Expr))

(function Wire (String i64) Expr)
(function Reg (String i64) Expr)
(function Mux (Expr Expr) Expr)
(function Demux (Expr Expr) Expr)
(function And (Expr Expr) Expr)
(function Or (Expr Expr) Expr)
(function Not (Expr) Expr)
(function Select (i64 Expr) Expr :cost 1000)
(function MapSelect (i64 ExprVec) Expr)
(function Concat (Expr Expr) Expr)
(function Read (Expr ExprVec) Expr)

(datatype Port
  (ReadPort Expr ExprVec ExprVec)
  (WritePort Expr Expr Expr)
  (WritePortMask Expr Expr Expr Expr))
(sort ReadPorts (Vec Port))
(sort WritePorts (Vec Port))

(datatype Opt
  (LatchLastRead)
  (WriteReadForward)
  (Sync))
(sort Opts (Vec Opt))

(datatype Memory (Mem ReadPorts WritePorts Opts))

(datatype Type
  (Bitvector i64))

(relation HasType (Expr Type))

(ruleset typing)

(rule
  ((Wire name n))
  ((HasType (Wire name n) (Bitvector n)))
  :ruleset typing)

(rule
  ((Reg name n))
  ((HasType (Reg name n) (Bitvector n)))
  :ruleset typing)

(rule
  ((Not a)
   (HasType a (Bitvector 1)))
  ((HasType (Not a) (Bitvector 1)))
  :ruleset typing)

(rule
  ((And a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (And a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Or a b)
   (HasType a (Bitvector 1))
   (HasType b (Bitvector 1)))
  ((HasType (Or a b) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Select i a)
   (HasType a (Bitvector bw))
   (>= i 0)
   (< i bw))
  ((HasType (Select i a) (Bitvector 1)))
  :ruleset typing)

(rule
 ((Concat a b)
  (HasType a (Bitvector n))
  (HasType b (Bitvector m)))
 ((HasType (Concat a b) (Bitvector (+ n m))))
 :ruleset typing)

(rule
 ((MapSelect i wv))
 ((HasType (MapSelect i wv) (Bitvector (vec-length wv))))
 :ruleset typing)

(rule
  ((Mux s i)
   (HasType s (Bitvector m))
   (HasType i (Bitvector n))
   (= m (log2 n)))
  ((HasType (Mux s i) (Bitvector 1)))
  :ruleset typing)

(rule
  ((Demux s i)
   (HasType s (Bitvector 1))
   (HasType i (Bitvector n))
   (= n (log2 m)))
  ((HasType (Demux s i) (Bitvector m)))
  :ruleset typing)

(ruleset decomp)
;; 2-to-1 mux
;; s a b <--> (a & ~s) | (b & s)
(rule
 ((= mux (Or e0 e1))
  (= e0 (And a (Not s)))
  (= e1 (And b s)))
 ((union mux (Mux s (Concat a b))))
 :ruleset decomp)

(rule
 ((= m_a (Mux s a))
  (HasType s (Bitvector n_s))
  (HasType a (Bitvector n_a))
  (= m_b (Mux s b))
  (HasType b (Bitvector n_b))
  (= n_a n_b)
  (= m_c (Mux s0 (Concat m_a m_b))))
 ((union m_c
   (Mux (Concat s s0) (Concat a b))))
 :ruleset decomp)

(rewrite
 (Concat (Select i a) (Select i b))
 (MapSelect i (vec-of a b))
 :ruleset decomp)

(rewrite
 (Concat (MapSelect i a) (MapSelect i b))
 (MapSelect i (vec-append a b))
 :ruleset decomp)

(let a0 (Wire "a0" 1))
(let a1 (Wire "a1" 1))
(let x0 (Reg "x0" 2))
(let x1 (Reg "x1" 2))
(let x2 (Reg "x2" 2))
(let x3 (Reg "x3" 2))
(let rd0 (Wire "rd0" 1))
;(let rd1 (Wire "rd1"))
(let x00 (Wire "x00" 1))
(let x10 (Wire "x10" 1))
(let x20 (Wire "x20" 1))
(let x30 (Wire "x30" 1))
(let na0 (Wire "na0" 1))
(let na1 (Wire "na1" 1))
(let t0 (Wire "t0" 1))
(let t1 (Wire "t1" 1))
(let t2 (Wire "t2" 1))
(let t3 (Wire "t3" 1))
(let t4 (Wire "t4" 1))
(let t5 (Wire "t5" 1))
(let t6 (Wire "t6" 1))
(let t7 (Wire "t7" 1))

; rd0 := (((x0[0] ∧ ¬a0) ∨ (x1[0] ∧ a0)) ∧ ¬a1) ∨ (((x2[0] ∧ ¬a0) ∨ (x3[0] ∧ a0)) ∧ a1)
(union x00 (Select 0 x0))
(union x10 (Select 0 x1))
(union x20 (Select 0 x2))
(union x30 (Select 0 x3))
(union na0 (Not a0))
(union na1 (Not a1))
(union t0 (And x00 na0))
(union t1 (And x10 a0))
(union t2 (And x20 na0))
(union t3 (And x30 a0))
(union t4 (Or t0 t1))
(union t5 (Or t2 t3))
(union t6 (And t4 na1))
(union t7 (And t5 a1))
(union rd0 (Or t6 t7))

(delete (Wire "x00" 1))
(delete (Wire "x10" 1))
(delete (Wire "x20" 1))
(delete (Wire "x30" 1))
(delete (Wire "na1" 1))
(delete (Wire "na1" 1))
(delete (Wire "t0" 1))
(delete (Wire "t1" 1))
(delete (Wire "t2" 1))
(delete (Wire "t3" 1))
(delete (Wire "t4" 1))
(delete (Wire "t5" 1))
(delete (Wire "t6" 1))
(delete (Wire "t7" 1))
(delete (Wire "rd0" 1))

(run-schedule (repeat 15 (saturate typing) (saturate decomp)))

(query-extract rd0)

(let rd (Concat
 (Mux (Concat (Wire "a0" 1) (Wire "a1" 1)) (MapSelect 0 (vec-of (Reg "x0" 2) (Reg "x1" 2) (Reg "x2" 2) (Reg "x3" 2))))
 (Mux (Concat (Wire "a0" 1) (Wire "a1" 1)) (MapSelect 1 (vec-of (Reg "x0" 2) (Reg "x1" 2) (Reg "x2" 2) (Reg "x3" 2))))))

(rule
 ((= d (Concat
        (Mux a (MapSelect 0 x))
        (Mux a (MapSelect 1 x))))
  (HasType a (Bitvector n))
  (= (log2 (vec-length x)) n))
 ((union d (Read a x)))
 :ruleset decomp)

(run-schedule (repeat 15 (saturate typing) (saturate decomp)))
(query-extract rd)

